<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ware.group.member.MemberDAO">

	<select id="getMembers" resultType="MemberVO">
		select * from MEMBER
	</select>
	<select id="getStatusMembers" resultType="MemberVO" parameterType="WorkTimeVO">
	select DISTINCT m.id  from `MEMBER` m
	inner join
	WORKTIME w
	on(m.id = w.member_id)
	where m.status =1 and w.reg_date <![CDATA[ <= ]]> #{regDate}
	</select>

	<select id="getMemberList" resultMap="getMemberProfile">
		select m.id as m_id,m.employee_id,m.account_id ,m.name as
		m_name ,m.status,m.birth_date ,m.email ,m.phone ,m.address, m.hire_date
		,p.file_name,p.ori_name
		,d.name as dep_name,j.name as job_name
		from `MEMBER` m
		left outer join
		PROFILE p
		on m.id=p.member_id
		left outer join
		DEPARTMENT d
		on m.department_id =d.id
		left outer JOIN
		JOB j
		on m.job_id
		=j.id
		
	
	</select>
	<select id="getMemberLogin" parameterType="MemberVO"
		resultMap="getLoginResult">
		select m.id as m_id, m.employee_id ,m.account_id
		,m.password,m.status ,r.id
		as r_id, r.name as r_name from `MEMBER` m
		inner join
		MEMBERROLE mr
		on m.id =mr.member_id
		INNER JOIN
		`ROLE` r
		on
		mr.role_id =r.id
		where account_id =#{accountId}
	</select>
	<!-- userDetail(Profile) -->
	<select id="getMemberProfile" parameterType="MemberVO"
		resultMap="getMemberProfile">
		select m.id as m_id,m.employee_id,m.account_id ,m.name as
		m_name,m.department_id,m.job_id,m.status
		,m.status,m.birth_date ,m.email ,m.phone ,m.address, m.hire_date
		,d.name as dep_name,j.name as job_name
		from `MEMBER` m
		left outer join
		DEPARTMENT d
		on m.department_id =d.id
		left outer JOIN
		JOB j
		on m.job_id
		=j.id
		where account_id =#{accountId};
	</select>
	<!-- userDetail(인사) -->
	<select id="getMemberDetail" parameterType="MemberVO"
		resultMap="getMemberProfile">
		select m.id as m_id,m.employee_id,m.account_id ,m.name as
		m_name,m.department_id,m.job_id,m.status,m.end_date
		,m.birth_date ,m.email ,m.phone ,m.address, m.hire_date
		,d.name as dep_name,j.name as job_name
		from `MEMBER` m
		left outer join
		DEPARTMENT d
		on m.department_id =d.id
		left outer JOIN
		JOB j
		on m.job_id
		=j.id
		where m.id =#{id};
	</select>


	<insert id="setMemberJoin" parameterType="MemberVO">
		<selectKey keyProperty="id" resultType="Long" order="AFTER">
			select
			id from `MEMBER` where id=(SELECT MAX(id) from `MEMBER`)
		</selectKey>

		INSERT INTO `MEMBER`
		(employee_id,account_id,job_id
		,PASSWORD,name,birth_date,email,phone,address,reg_date,update_date,hire_date,end_date,status,department_id)
		VALUES(#{employeeId},#{accountId},#{jobId},#{password},#{name},#{birthDate},#{email},#{phone},#{address},now(),now(),#{hireDate,
		jdbcType=DATE},#{endDate, jdbcType=DATE},1,#{departmentId})
	</insert>


	<insert id="setMemberRole" parameterType="Map">
		INSERT INTO MEMBERROLE
		(role_id, member_id)
		VALUES(#{roleId}, #{memberId})
	</insert>

	<!-- profile update -->
	<update id="setMemberUpdate" parameterType="MemberVO">
		update `MEMBER` SET
		account_id=#{accountId},name=#{name},address=#{address},
		email=#{email},phone=#{phone}, birth_date=#{birthDate},
		update_date=now()
		where id=#{id}

	</update>
	
	<update id="setMemberUpdateDetail" parameterType="MemberVO">
	
	update `MEMBER` SET
		account_id=#{accountId},name=#{name},address=#{address},
		email=#{email},phone=#{phone}, birth_date=#{birthDate,jdbcType=DATE},
		update_date=now(),status=#{status},end_date=#{endDate,jdbcType=DATE},
		department_id=#{departmentId},job_id=#{jobId},hire_date=#{hireDate,jdbcType=DATE} 
		where id=#{id}
	
	</update>


	<!-- pwUpdate  유저는 accountId로 검증-->
	<update id="setPasswordUpdate" parameterType="MemberVO">
		update `MEMBER` SET
		password=#{password}
		where account_id=#{accountId}
	</update>
	<!-- NOT Spring Security  관리자는 Id로 검증-->
	<update id="setPasswordUpdateinit" parameterType="MemberVO">
		update `MEMBER` SET
		password=#{password}
		where id=#{id}
	</update>
	<!-- select JobList -->
	<select id="getJobList" resultType="JobVO">
		select * from JOB
	</select>
<!-- jobAdd -->
	<insert id="setJobAdd" parameterType="jobVO">
		insert into JOB (name)
	values(#{name})
	</insert>
	<!-- profile관련 -->
	<select id="getProfile" parameterType="MemberProfileVO" resultType="MemberProfileVO">
	select * from PROFILE WHERE member_id=#{memberId}
	</select>
	
	<insert id="setProfileAdd" parameterType="MemberProfileVO">
	insert into PROFILE (member_id,file_name,ori_name)
	values(#{memberId},#{fileName},#{oriName})
	</insert>
	<delete id="setProfileDelete" parameterType="MemberProfileVO">
	delete from PROFILE WHERE member_id=#{memberId}
	</delete>

	<delete id="setJobDelete" parameterType="JobVO">
	delete from JOB WHERE id=#{id}
	</delete>
	<!-- 검증 1. ID중복검사 -->
	<select id="idDuplicateCheck" resultType="MemberVO"
		parameterType="MemberVO">
		SELECT account_id FROM MEMBER WHERE
		account_id=#{accountId}
	</select>
	<select id="employeeIdCheck" parameterType="MemberVO" resultType="MemberVO">
		SELECT employee_id FROM MEMBER WHERE employee_id=#{employeeId}
	
	</select>

	<select id="getAnnual" parameterType="MemberVO" resultType="AnnualVO">
		SELECT * FROM ANNUAL WHERE member_id=#{id}
	
	</select>
	<!-- result Map -->

	<!-- 1. Login -->
	<resultMap type="MemberVO" id="getLoginResult">
		<id property="id" column="m_id" />
		<result property="employeeId" column="employee_id" />
		<result property="accountId" column="account_id" />
		<result property="password" column="password" />
		<result property="status" column="status" />
		<collection property="roleVOs" javaType="List"
			ofType="RoleVO">
			<id property="id" column="r_id" />
			<result property="name" column="r_name" />
		</collection>
	</resultMap>

	<!-- 2. MemberProfile -->
	<resultMap type="MemberVO" id="getMemberProfile">
		<id property="id" column="m_id" />
		<result property="employeeId" column="employee_id" />
		<result property="accountId" column="account_id" />
		<result property="name" column="m_name" />
		<result property="phone" column="phone" />
		<result property="birthDate" column="birth_date" />
		<result property="email" column="email" />
		<result property="status" column="status" />
		<result property="address" column="address" />
		<result property="hireDate" column="hire_date" />
		<result property="departmentId" column="department_id" />
		<result property="jobId" column="job_id" />
		<result property="status" column="status" />
		<result property="endDate" column="end_date" />
		<association property="memberProfileVO" javaType="MemberProfileVO">
			<result property="fileName" column="file_name" />
			<result property="oriName" column="ori_name" />
			
		</association>
		<association property="jobVO" javaType="JobVO">
			<id property="name" column="job_name" />
		</association>
		<association property="departmentVO"
			javaType="DepartmentVO">
			<id property="name" column="dep_name" />
		</association>
		

	</resultMap>
	<!-- End Result Map -->
	
	<insert id="setAnnualAdd" parameterType="MemberVO">
	INSERT INTO ANNUAL (count,`type`,reg,member_id)
	values(15,1,now(),#{id})
	</insert>
	<update id="setAnnualUpdate" parameterType="AnnualVO">
	UPDATE ANNUAL SET count=#{count}, reg=now() where member_id=#{member_id}
	</update>


	<!-- ////////////////////////////////////////////////////////////////////////// -->
	<!-- 근태관리 -->
	<!-- setting : 일요일 마다 status가 1인 활성화된 직원들의 근태 만들기 -->
	<!-- 1. 출근 : update --><!-- 퇴근 : update -->

	<insert id="setTimeStempInsert"
		parameterType="EmployeeStatusVO">
		insert into
		EMPLOYEESTATUS(reg,on_time,off_time,status,member_id)
		values(now(),null,null,'출근전',#{memberId})
	</insert>
	
	<insert id="setVacation"
		parameterType="EmployeeStatusVO">
		insert into
		EMPLOYEESTATUS(reg,on_time,off_time,status,member_id)
		values(#{reg},#{onTime},#{offTime},#{status},#{memberId})
	</insert>


	<select id="getEmployeeStatus" parameterType="EmployeeStatusVO"
		resultType="EmployeeStatusVO">
		select * from EMPLOYEESTATUS e 
		where e.reg =(DATE_FORMAT(NOW(),'%y-%m-%d')) and member_id =#{memberId}

	</select>
	<select id="getEmployeeLastStatus" parameterType="EmployeeStatusVO"
		resultType="EmployeeStatusVO">
		select * from EMPLOYEESTATUS e 
		where member_id =#{memberId} and reg = (select MAX(reg) from EMPLOYEESTATUS where member_id=#{memberId})

	</select>
	

	<update id="setEmployeeStatusUpdate"
		parameterType="EmployeeStatusVO">

		update EMPLOYEESTATUS set
		on_time =#{onTime},off_time=#{offTime,jdbcType=TIMESTAMP},status=#{status,jdbcType=VARCHAR}
		
		where id=#{id}
	</update>
	
	<!-- 출근 안한 더미데이터 지우기 -->
	 <delete id="setWorkNullDelete" parameterType="EmployeeStatusVO">
	delete from EMPLOYEESTATUS where status='출근전' and member_id =#{memberId}
	</delete>
	
	<!-- 퇴근 안찍은 사람 검색 -->
	<select id="getNotOffTimeEmployee" parameterType="EmployeeStatusVO" resultType="EmployeeStatusVO">
	select * from EMPLOYEESTATUS where member_id=#{memberId} and status in('출근','지각') and ISNULL(off_time) 
	</select>
	
	<!-- 오늘 출근한 데이터 있는지 여부 -->
	<select id="getWorkIsEmpty" parameterType="EmployeeStatusVO" resultType="EmployeeStatusVO">
	select * from EMPLOYEESTATUS e where reg =CURDATE() and member_id =#{memberId}
	</select>
	
	<update id="setWorkEmptyUpdate" parameterType="EmployeeStatusVO">
	update EMPLOYEESTATUS set off_time=#{offTime} where member_id=#{memberId}
	</update>
	
	<!-- 기본 근무시간 -->
	<!-- 현재 날짜의 기본 근무시간 -->
	<select id="getDefaultWork" parameterType="WorkTimeVO"
		resultType="WorkTimeVO">
		select * from WORKTIME where reg_date=(SELECT max(reg_date) from WORKTIME where member_id=#{memberId})and member_id =#{memberId}

	</select>
	<!-- 날짜별로 기본 근무시간 -->
	<select id="getDefaultWorkFilter" parameterType="WorkTimeVO" resultType="workTimeVO">
	select * from WORKTIME where id =(SELECT id from WORKTIME where reg_date <![CDATA[ <= ]]>#{regDate} and member_id=#{memberId}  order by reg_date asc LIMIT 1) 
	</select>
	<update id="setDefultWorkUpdate" parameterType="WorkTimeVO">
	update WORKTIME set start_time =#{startTime},finish_time=#{finishTime} where id=#{id}
	</update>
	
	<insert id="setDefaultWorkAdd" parameterType="WorkTimeVO">
	insert into WORKTIME (start_time,finish_time,meal_time,reg_date,member_id)
		values(#{startTime},#{finishTime},#{mealTime},#{regDate},#{memberId})
	</insert>

	<update id="setDefaultWorkUpdate" parameterType="WorkTimeVO">
	update WORKTIME set start_time =#{startTime}, finish_time=#{finishTime} where id=#{id}
	</update>
	
	<select id="getEmployeeStatusList" parameterType="EmployeeStatusVO" resultType="EmployeeStatusVO">
	select * from EMPLOYEESTATUS where member_id=#{memberId}
	</select>
	<select id="getWorkingList" parameterType="WorkTimeStatusVO" resultType="EmployeeStatusVO">
	SELECT * from EMPLOYEESTATUS e   where reg between#{startDate} and #{endDate} and member_id =#{memberId} and off_time is not null;
	</select>
<!-- 연차 승인 -->		
	<select id="getHolidays" parameterType="EmployeeStatusVO" resultType="LeaveRecordVO">
      select * from LEAVERECODE where use_date = #{reg} and type = '승인' and member_id =#{memberId}
   </select>
	<!-- 연차 승인 내역  -->
	<select id="getLeaveRecodeList" parameterType="MemberVO" resultType="LeaveRecordVO">
      select * from LEAVERECODE where type = '승인' and member_id =#{id}
   </select>
		
	<update id="setLeaveRecordUpdate" parameterType="LeaveRecordVO">
	
	update LEAVERECODE set use_date =#{useDate} where id=#{id}
	
	</update>
		
	<!--공휴일 불러오기 -->
	<select id="getHolidayList" parameterType="HolidayVO" resultType="HolidayVO">
	select HOL_DATE  from HOLIDAY where HOL_MONTH =#{holMonth}
	</select>
	<!--  -->
	<insert id="sampleData" parameterType="EmployeeStatusVO">

	insert into EMPLOYEESTATUS (reg,on_time,off_time,status,member_id)
	values(#{reg},#{onTime},#{offTime},#{status},#{memberId})
	
	</insert>
</mapper>  